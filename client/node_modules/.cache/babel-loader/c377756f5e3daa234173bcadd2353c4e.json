{"ast":null,"code":"var _jsxFileName = \"D:\\\\courseHunter\\\\React  ( Redux, Hooks, GraphQL)\\\\practice_project\\\\src\\\\components\\\\sign-in\\\\sign-in.js\",\n    _s = $RefreshSig$();\n\nimport { connect } from 'react-redux';\nimport CustomButton from '../custom-button/custom-button';\nimport FormInput from '../form-input/form-input';\nimport './sign-in.scss';\nimport { googleSignInStart, emailSignInStart } from '../../redux/user/user-actions';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SignIn = ({\n  googleSignInStart\n}) => {\n  _s();\n\n  const [userInf, setUserInf] = useState({\n    email: '',\n    password: ''\n  });\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const {\n      email,\n      password\n    } = this.state;\n    this.props.emailSignInStart(email, password);\n  };\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    this.setState({\n      [name]: value\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sign-in\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"title\",\n      children: \"I already have an account\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Sign in with your email and password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      action: \"submit\",\n      children: [/*#__PURE__*/_jsxDEV(FormInput, {\n        name: \"email\",\n        type: \"email\",\n        value: state.email,\n        handleChange: handleChange,\n        required: true,\n        label: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n        name: \"password\",\n        type: \"password\",\n        value: state.password,\n        handleChange: handleChange,\n        required: true,\n        label: \"Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons\",\n        children: [/*#__PURE__*/_jsxDEV(CustomButton, {\n          type: \"submit\",\n          children: \"Sign In\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CustomButton, {\n          type: \"button\",\n          onClick: googleSignInStart,\n          isGoogleSignin: true,\n          children: \"Sign in with google\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SignIn, \"TvbIpvC5Atsy8R5gb3l+GglvQhY=\");\n\n_c = SignIn;\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    googleSignInStart: () => dispatch(googleSignInStart()),\n    emailSignInStart: (email, password) => dispatch(emailSignInStart({\n      email,\n      password\n    }))\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(SignIn);\n\nvar _c;\n\n$RefreshReg$(_c, \"SignIn\");","map":{"version":3,"sources":["D:/courseHunter/React  ( Redux, Hooks, GraphQL)/practice_project/src/components/sign-in/sign-in.js"],"names":["connect","CustomButton","FormInput","googleSignInStart","emailSignInStart","useState","SignIn","userInf","setUserInf","email","password","handleSubmit","e","preventDefault","state","props","handleChange","name","value","target","setState","mapDispatchToProps","dispatch"],"mappings":";;;AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAO,gBAAP;AACA,SACEC,iBADF,EAEEC,gBAFF,QAGO,+BAHP;AAIA,SAASC,QAAT,QAAyB,OAAzB;;;AAEA,MAAMC,MAAM,GAAG,CAAC;AAAEH,EAAAA;AAAF,CAAD,KAA2B;AAAA;;AACxC,QAAM,CAACI,OAAD,EAAUC,UAAV,IAAwBH,QAAQ,CAAC;AACrCI,IAAAA,KAAK,EAAE,EAD8B;AAErCC,IAAAA,QAAQ,EAAE;AAF2B,GAAD,CAAtC;;AAKA,QAAMC,YAAY,GAAG,MAAOC,CAAP,IAAa;AAChCA,IAAAA,CAAC,CAACC,cAAF;AACA,UAAM;AAAEJ,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAsB,KAAKI,KAAjC;AACA,SAAKC,KAAL,CAAWX,gBAAX,CAA4BK,KAA5B,EAAmCC,QAAnC;AACD,GAJD;;AAMA,QAAMM,YAAY,GAAIJ,CAAD,IAAO;AAC1B,UAAM;AAAEK,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBN,CAAC,CAACO,MAA1B;AACA,SAAKC,QAAL,CAAc;AAAE,OAACH,IAAD,GAAQC;AAAV,KAAd;AACD,GAHD;;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA,4BACE;AAAI,MAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAIE;AAAM,MAAA,QAAQ,EAAEP,YAAhB;AAA8B,MAAA,MAAM,EAAC,QAArC;AAAA,8BACE,QAAC,SAAD;AACE,QAAA,IAAI,EAAC,OADP;AAEE,QAAA,IAAI,EAAC,OAFP;AAGE,QAAA,KAAK,EAAEG,KAAK,CAACL,KAHf;AAIE,QAAA,YAAY,EAAEO,YAJhB;AAKE,QAAA,QAAQ,MALV;AAME,QAAA,KAAK,EAAC;AANR;AAAA;AAAA;AAAA;AAAA,cADF,eASE,QAAC,SAAD;AACE,QAAA,IAAI,EAAC,UADP;AAEE,QAAA,IAAI,EAAC,UAFP;AAGE,QAAA,KAAK,EAAEF,KAAK,CAACJ,QAHf;AAIE,QAAA,YAAY,EAAEM,YAJhB;AAKE,QAAA,QAAQ,MALV;AAME,QAAA,KAAK,EAAC;AANR;AAAA;AAAA;AAAA;AAAA,cATF,eAiBE;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA,gCACE,QAAC,YAAD;AAAc,UAAA,IAAI,EAAC,QAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,YAAD;AACE,UAAA,IAAI,EAAC,QADP;AAEE,UAAA,OAAO,EAAEb,iBAFX;AAGE,UAAA,cAAc,MAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAjBF;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmCD,CAnDD;;GAAMG,M;;KAAAA,M;;AAqDN,MAAMe,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACLnB,IAAAA,iBAAiB,EAAE,MAAMmB,QAAQ,CAACnB,iBAAiB,EAAlB,CAD5B;AAELC,IAAAA,gBAAgB,EAAE,CAACK,KAAD,EAAQC,QAAR,KAChBY,QAAQ,CAAClB,gBAAgB,CAAC;AAAEK,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAD,CAAjB;AAHL,GAAP;AAKD,CAND;;AAQA,eAAeV,OAAO,CAAC,IAAD,EAAOqB,kBAAP,CAAP,CAAkCf,MAAlC,CAAf","sourcesContent":["import { connect } from 'react-redux';\r\nimport CustomButton from '../custom-button/custom-button';\r\nimport FormInput from '../form-input/form-input';\r\nimport './sign-in.scss';\r\nimport {\r\n  googleSignInStart,\r\n  emailSignInStart,\r\n} from '../../redux/user/user-actions';\r\nimport { useState } from 'react';\r\n\r\nconst SignIn = ({ googleSignInStart }) => {\r\n  const [userInf, setUserInf] = useState({\r\n    email: '',\r\n    password: '',\r\n  });\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const { email, password } = this.state;\r\n    this.props.emailSignInStart(email, password);\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n  return (\r\n    <div className=\"sign-in\">\r\n      <h2 className=\"title\">I already have an account</h2>\r\n      <span>Sign in with your email and password</span>\r\n\r\n      <form onSubmit={handleSubmit} action=\"submit\">\r\n        <FormInput\r\n          name=\"email\"\r\n          type=\"email\"\r\n          value={state.email}\r\n          handleChange={handleChange}\r\n          required\r\n          label=\"Email\"\r\n        />\r\n        <FormInput\r\n          name=\"password\"\r\n          type=\"password\"\r\n          value={state.password}\r\n          handleChange={handleChange}\r\n          required\r\n          label=\"Password\"\r\n        />\r\n        <div className=\"buttons\">\r\n          <CustomButton type=\"submit\">Sign In</CustomButton>\r\n          <CustomButton\r\n            type=\"button\"\r\n            onClick={googleSignInStart}\r\n            isGoogleSignin\r\n          >\r\n            Sign in with google\r\n          </CustomButton>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    googleSignInStart: () => dispatch(googleSignInStart()),\r\n    emailSignInStart: (email, password) =>\r\n      dispatch(emailSignInStart({ email, password })),\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(SignIn);\r\n"]},"metadata":{},"sourceType":"module"}